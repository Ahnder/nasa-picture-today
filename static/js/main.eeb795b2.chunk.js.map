{"version":3,"sources":["components/ViewerTemplate/ViewerTemplate.js","components/SpaceNavigator/SpaceNavigator.js","components/Viewer/Viewer.js","lib/api.js","App.js","serviceWorker.js","index.js"],"names":["cx","classNames","bind","styles","ViewerTemplate","viewer","spaceNavigator","className","SpaceNavigator","onPrev","onNext","onClick","Viewer","mediaType","url","loading","color","size","window","open","src","alt","title","frameBorder","gesture","allow","allowFullScreen","getAPOD","date","axios","get","App","state","maxDate","a","setState","api","response","data","retrievedDate","media_type","console","log","handlePrev","prevDate","moment","subtract","format","handleNext","nextDate","add","this","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eeb795b2.chunk.js","sourcesContent":["import React from 'react';\r\nimport styles from './ViewerTemplate.scss';\r\nimport classNames from 'classnames/bind';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst ViewerTemplate = ({ viewer, spaceNavigator }) => {\r\n  return (\r\n    <div className={cx('viewer-template')}>\r\n      <header>Astronomy Picture of the Day</header>\r\n      <div className={cx('viewer-wrapper')}>\r\n        {viewer}\r\n        <div className={cx('space-navigator-wrapper')}>{spaceNavigator}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewerTemplate;\r\n","import React from 'react';\r\nimport styles from './SpaceNavigator.scss';\r\nimport classNames from 'classnames/bind';\r\nimport { MdArrowBack } from 'react-icons/md/';\r\nimport { MdArrowForward } from 'react-icons/md';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst SpaceNavigator = ({ onPrev, onNext }) => {\r\n  return (\r\n    <div className={cx('space-navigator')}>\r\n      <div className={cx('left', 'end')}>\r\n        <div className={cx('circle')} onClick={onPrev}>\r\n          <MdArrowBack />\r\n        </div>\r\n      </div>\r\n      <div className={cx('right', 'end')}>\r\n        <div className={cx('circle')} onClick={onNext}>\r\n          <MdArrowForward />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SpaceNavigator;\r\n","import React from 'react';\r\nimport styles from './Viewer.scss';\r\nimport classNames from 'classnames/bind';\r\nimport { ChasingDots } from 'better-react-spinkit';\r\n\r\nconst cx = classNames.bind(styles);\r\n\r\nconst Viewer = ({ mediaType, url, loading }) => {\r\n  if (loading) {\r\n    return (\r\n      <div className={cx('viewer')}>\r\n        <ChasingDots color=\"white\" size={60} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!url) return null;\r\n\r\n  return (\r\n    <div className={cx('viewer')}>\r\n      {mediaType === 'image' ? (\r\n        <img onClick={() => window.open(url)} src={url} alt=\"space\" />\r\n      ) : (\r\n        <iframe\r\n          title=\"space-video\"\r\n          src={url}\r\n          frameBorder=\"0\"\r\n          gesture=\"media\"\r\n          allow=\"encrypted-media\"\r\n          allowFullScreen\r\n        ></iframe>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Viewer;\r\n","import axios from 'axios';\r\n\r\nexport function getAPOD(date = '') {\r\n  return axios.get(\r\n    `https://api.nasa.gov/planetary/apod?api_key=rWwxvxslxpsr2usv5uLMpmyYyUo6u0V7DGNQ8y9p&date=${date}`,\r\n  );\r\n}\r\n","import React, { Component } from 'react';\nimport ViewerTemplate from './components/ViewerTemplate';\nimport SpaceNavigator from './components/SpaceNavigator';\nimport Viewer from './components/Viewer';\nimport moment from 'moment';\n\nimport * as api from './lib/api';\n\nclass App extends Component {\n  state = {\n    loading: false,\n    maxDate: null,\n    date: null,\n    url: null,\n    mediaType: null,\n  };\n\n  getAPOD = async (date) => {\n    if (this.state.loading) return; // 이미 요청 중이라면 무시\n\n    // 로딩 상태 시작\n    this.setState({\n      loading: true,\n    });\n\n    try {\n      const response = await api.getAPOD(date);\n      const { date: retrievedDate, url, media_type: mediaType } = response.data;\n\n      if (!this.state.maxDate) {\n        this.setState({\n          maxDate: retrievedDate,\n        });\n      }\n\n      this.setState({\n        date: retrievedDate,\n        mediaType,\n        url,\n      });\n\n      console.log(response);\n    } catch (e) {\n      console.log(e);\n    }\n\n    this.setState({\n      loading: false,\n    });\n  };\n\n  handlePrev = () => {\n    const { date } = this.state;\n    const prevDate = moment(date).subtract(1, 'days').format('YYYY-MM-DD');\n    console.log(prevDate);\n    this.getAPOD(prevDate);\n  };\n  handleNext = () => {\n    const { date, maxDate } = this.state;\n    if (date === maxDate) return;\n    const nextDate = moment(date).add(1, 'days').format('YYYY-MM-DD');\n    console.log(nextDate);\n    this.getAPOD(nextDate);\n  };\n\n  componentDidMount() {\n    this.getAPOD();\n  }\n\n  render() {\n    const { url, mediaType, loading } = this.state;\n    const { handlePrev, handleNext } = this;\n\n    return (\n      <ViewerTemplate\n        spaceNavigator={\n          <SpaceNavigator onPrev={handlePrev} onNext={handleNext} />\n        }\n        viewer={<Viewer url={url} mediaType={mediaType} loading={loading} />}\n      />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/base.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}